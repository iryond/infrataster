{"name":"Infrataster","tagline":"Infrastructure Behavior Testing Framework","body":"# Infrataster\r\n[![Gitter](https://badges.gitter.im/Join Chat.svg)](https://gitter.im/ryotarai/infrataster?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\r\n\r\n[![Gem Version](https://badge.fury.io/rb/infrataster.png)](http://badge.fury.io/rb/infrataster)\r\n[![Code Climate](https://codeclimate.com/github/ryotarai/infrataster.png)](https://codeclimate.com/github/ryotarai/infrataster)\r\n\r\nInfrastructure Behavior Testing Framework.\r\n\r\n\r\n## Basic Usage with Vagrant\r\n\r\nFirst, create `Gemfile`:\r\n\r\n```ruby\r\nsource 'https://rubygems.org'\r\n\r\ngem 'infrataster'\r\n```\r\n\r\nInstall gems:\r\n\r\n```\r\n$ bundle install\r\n```\r\n\r\nInstall Vagrant: [Official Docs](http://docs.vagrantup.com/v2/installation/index.html)\r\n\r\nCreate Vagrantfile:\r\n\r\n```ruby\r\n# Vagrantfile\r\nVagrant.configure(\"2\") do |config|\r\n  config.vm.box = \"hashicorp/precise64\"\r\n\r\n  config.vm.define :proxy do |c|\r\n    c.vm.network \"private_network\", ip: \"192.168.33.10\"\r\n    c.vm.network \"private_network\", ip: \"172.16.33.10\", virtualbox__intnet: \"infrataster-example\"\r\n  end\r\n\r\n  config.vm.define :app do |c|\r\n    c.vm.network \"private_network\", ip: \"172.16.33.11\", virtualbox__intnet: \"infrataster-example\"\r\n  end\r\nend\r\n```\r\n\r\nStart VMs:\r\n\r\n```\r\n$ vagrant up\r\n```\r\n\r\nInitialize rspec directory:\r\n\r\n```\r\n$ rspec --init\r\n  create   spec/spec_helper.rb\r\n  create   .rspec\r\n```\r\n\r\n`require 'infrataster/rspec'` and define target servers for testing in `spec/spec_helper.rb`:\r\n\r\n```ruby\r\n# spec/spec_helper.rb\r\nrequire 'infrataster/rspec'\r\n\r\nInfrataster::Server.define(\r\n  :proxy,           # name\r\n  '192.168.0.0/16', # ip address\r\n  vagrant: true     # for vagrant VM\r\n)\r\nInfrataster::Server.define(\r\n  :app,             # name\r\n  '172.16.0.0/16',  # ip address\r\n  vagrant: true,    # for vagrant VM\r\n  from: :proxy      # access to this machine via SSH port forwarding from proxy\r\n)\r\n\r\n# Code generated by `rspec --init` is following...\r\n```\r\nOr\r\n\r\n```ruby\r\n# spec/spec_helper.rb\r\nrequire 'infrataster/rspec'\r\n\r\nInfrataster::Server.define(:proxy) do |server|\r\n    server.address = '192.168.0.0/16'\r\n    server.vagrant = true\r\nend\r\nInfrataster::Server.define(:app) do |server|\r\n    server.address = '172.16.0.0/16'\r\n    server.vagrant = true\r\n    server.from = :proxy\r\nend\r\n\r\n# Code generated by `rspec --init` is following...\r\n```\r\n\r\nThen, you can write spec files:\r\n\r\n```ruby\r\n# spec/example_spec.rb\r\nrequire 'spec_helper'\r\n\r\ndescribe server(:app) do\r\n  describe http('http://app') do\r\n    it \"responds content including 'Hello Sinatra'\" do\r\n      expect(response.body).to include('Hello Sinatra')\r\n    end\r\n    it \"responds as 'text/html'\" do\r\n      expect(response.headers['content-type']).to eq(\"text/html\")\r\n    end\r\n  end\r\nend\r\n```\r\n\r\nRun tests:\r\n\r\n```\r\n$ bundle exec rspec\r\n2 examples, 2 failures\r\n```\r\n\r\nCurrently, the tests failed because the VM doesn't respond to HTTP request.\r\n\r\nIt's time to write provisioning instruction like Chef's cookbooks or Puppet's manifests!\r\n\r\n## Server\r\n\r\n\"Server\" is a server you tests. This supports Vagrant, which is very useful to run servers for testing. Of course, you can test real servers.\r\n\r\nYou should define servers in `spec_helper.rb` like the following:\r\n\r\n```ruby\r\nInfrataster::Server.define(\r\n  # Name of the server, this will be used in the spec files.\r\n  :proxy,\r\n  # IP address of the server\r\n  '192.168.0.0/16',\r\n  # If the server is provided by vagrant and this option is true,\r\n  # SSH configuration to connect to this server is got from `vagrant ssh-config` command automatically.\r\n  vagrant: true,\r\n)\r\n\r\nInfrataster::Server.define(\r\n  # Name of the server, this will be used in the spec files.\r\n  :app,\r\n  # IP address of the server\r\n  '172.16.0.0/16',\r\n  # If the server is provided by vagrant and this option is true,\r\n  # SSH configuration to connect to this server is got from `vagrant ssh-config` command automatically.\r\n  vagrant: true,\r\n  # Which gateway is used to connect to this server by SSH port forwarding?\r\n  from: :proxy,\r\n  # options for resources\r\n  mysql: {user: 'app', password: 'app'},\r\n)\r\n```\r\n\r\nYou can specify SSH configuration manually too:\r\n\r\n```ruby\r\nInfrataster::Server.define(\r\n  # ...\r\n  ssh: {host_name: 'hostname', user: 'testuser', keys: ['/path/to/id_rsa']}\r\n)\r\n```\r\n\r\n### fuzzy IP address\r\n\r\nInfrataster has \"fuzzy IP address\" feature. You can pass IP address which has netmask (= CIDR) to `Infrataster::Server#define`. This needs `vagrant` option or `ssh` option which has `host_name` because this fetches all IP address via SSH and find the matching one.\r\n\r\n```ruby\r\nInfrataster::Server.define(\r\n  :app,\r\n  # find IP address matching 172.16.0.0 ~ 172.16.255.255\r\n  '172.16.0.0/16',\r\n)\r\n```\r\n\r\nOf course, you can set fully-specified IP address too.\r\n\r\n```ruby\r\nInfrataster::Server.define(\r\n  :app,\r\n  '172.16.11.22',\r\n  # or\r\n  '172.16.11.22/32',\r\n)\r\n```\r\n\r\n### #ssh_exec\r\n\r\nYou can execute a command on the server like the following:\r\n\r\n```ruby\r\ndescribe server(:proxy) do\r\n  let(:time) { Time.now }\r\n  before do\r\n    current_server.ssh_exec \"echo 'Hello' > /tmp/test-#{time.to_i}\"\r\n  end\r\n  it \"executes a command on the current server\" do\r\n    result = current_server.ssh_exec(\"cat /tmp/test-#{time.to_i}\")\r\n    expect(result.chomp).to eq('Hello')\r\n  end\r\nend\r\n```\r\n\r\nThis is useful to test cases which depends on the status of the server.\r\n\r\n## Resources\r\n\r\n\"Resource\" is what you test by Infrataster. For instance, the following code describes `http` resource.\r\n\r\n```ruby\r\ndescribe server(:app) do\r\n  describe http('http://example.com') do\r\n    it \"responds content including 'Hello Sinatra'\" do\r\n      expect(response.body).to include('Hello Sinatra')\r\n    end\r\n  end\r\nend\r\n```\r\n\r\n### `http` resource\r\n\r\n`http` resource tests HTTP response when sending HTTP request.\r\nIt accepts `method`, `params` and `header` as options.\r\n\r\n```ruby\r\ndescribe server(:app) do\r\n  describe http(\r\n    'http://app.example.com',\r\n    method: :post,\r\n    params: {'foo' => 'bar'},\r\n    headers: {'USER' => 'VALUE'}\r\n  ) do\r\n    it \"responds with content including 'app'\" do\r\n      expect(response.body).to include('app')\r\n\r\n      # `response` is a instance of `Faraday::Response`\r\n      # See: https://github.com/lostisland/faraday/blob/master/lib/faraday/response.rb\r\n    end\r\n  end\r\n  \r\n  # Gzip support\r\n  describe http('http://app.example.com/gzipped') do\r\n    it \"responds with content deflated by gzip\" do\r\n      expect(response.headers['content-encoding']).to eq('gzip')\r\n    end\r\n  end\r\n  \r\n  describe http('http://app.example.com/gzipped', inflate_gzip: true) do\r\n    it \"responds with content inflated automatically\" do\r\n      expect(response.headers['content-encoding']).to be_nil\r\n      expect(response.body).to eq('plain text')\r\n    end\r\n  end\r\nend\r\n```\r\n\r\n### `capybara` resource\r\n\r\n`capybara` resource tests your web application by simulating real user's interaction.\r\n\r\n```ruby\r\ndescribe server(:app) do\r\n  describe capybara('http://app.example.com') do\r\n    it 'shows food list' do\r\n      visit '/'\r\n      click_link 'Foods'\r\n      expect(page).to have_content 'Yummy Soup'\r\n    end\r\n  end\r\nend\r\n```\r\n\r\n### `mysql_query` resource\r\n\r\n`mysql_query` resource is now in [infrataster-plugin-mysql](https://github.com/ryotarai/infrataster-plugin-mysql).\r\n\r\n### `pgsql_query` resource\r\n\r\n`pgsql_query` resource sends a query to PostgreSQL server.\r\n\r\n`pgsql_query` is provided by [infrataster-plugin-pgsql](https://github.com/SnehaM/infrataster-plugin-pgsql) by [@SnehaM](https://github.com/SnehaM).\r\n\r\n### `dns` resource\r\n\r\n`dns` resource sends a query to DNS server.\r\n\r\n`dns` is provided by [infrataster-plugin-dns](https://github.com/otahi/infrataster-plugin-dns) by [@otahi](https://github.com/otahi).\r\n\r\n### `memcached` resource\r\n\r\n`memcached` resource sends a query to memcached server.\r\n\r\n`memcached` is provided by [infrataster-plugin-memecached](https://github.com/rahulkhengare/infrataster-plugin-memcached) by [@rahulkhengare](https://github.com/rahulkhengare).\r\n\r\n### `redis` resource\r\n\r\n`redis` resource sends a query to redis server.\r\n\r\n`redis` is provided by [infrataster-plugin-redis](https://github.com/rahulkhengare/infrataster-plugin-redis) by [@rahulkhengare](https://github.com/rahulkhengare).\r\n\r\n### `firewall` resource\r\n\r\n`firewall` resource tests your firewalls.\r\n\r\n`firewall` is provided by [infrataster-plugin-firewall](https://github.com/otahi/infrataster-plugin-firewall) by [@otahi](https://github.com/otahi).\r\n\r\n## Example\r\n\r\n* [example](example)\r\n* [spec/integration](spec/integration)\r\n\r\n## Tests\r\n\r\n### Unit Tests\r\n\r\nUnit tests are under `spec/unit` directory.\r\n\r\n```\r\n$ bundle exec rake spec:unit\r\n```\r\n\r\n### Integration Tests\r\n\r\nIntegration tests are under `spec/integration` directory.\r\n\r\n```\r\n$ bundle exec rake spec:integration:prepare\r\n$ bundle exec rake spec:integration\r\n```\r\n\r\n## Presentations\r\n\r\n* https://speakerdeck.com/ryotarai/introducing-infrataster\r\n\r\n<a href=\"https://speakerdeck.com/ryotarai/introducing-infrataster\">\r\n<img src=\"http://i.gyazo.com/305b8b041acd3569268ece4e07e2517a.png\" alt=\"Introducing Infrataster\" width=\"300px\">\r\n</a>\r\n\r\n* https://speakerdeck.com/ryotarai/infrataster-infra-behavior-testing-framework-number-oedo04\r\n\r\n## Changelog\r\n\r\n[Changelog](CHANGELOG.md)\r\n\r\n## Contributing\r\n\r\n1. Fork it ( http://github.com/ryotarai/infrataster/fork )\r\n2. Create your feature branch (`git checkout -b my-new-feature`)\r\n3. Commit your changes (`git commit -am 'Add some feature'`)\r\n4. Push to the branch (`git push origin my-new-feature`)\r\n5. Create new Pull Request\r\n","google":"UA-51089399-1","note":"Don't delete this file! It's used internally to help with page regeneration."}